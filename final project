
Question 1: Use yfinance to Extract Stock Data

Using the Ticker function enter the ticker symbol of the stock we want to extract data on to create a ticker object. The stock is Tesla and its ticker symbol is TSLA.

Tesla = yf.Ticker('TSLA')

Using the ticker object and the function history extract stock information and save it in a dataframe named tesla_data. Set the period parameter to max so we get information for the maximum amount of time.

tesla_data = Tesla.history(period = "max")

Reset the index using the reset_index(inplace=True) function on the tesla_data DataFrame and display the first five rows of the tesla_data dataframe using the head function. Take a screenshot of the results and code from the beginning of Question 1 to the results below.

tesla_data.reset_index(inplace = True)
tesla_data.head()

	Date 	Open 	High 	Low 	Close 	Volume 	Dividends 	Stock Splits
0 	2010-06-29 	3.800 	5.000 	3.508 	4.778 	93831500 	0 	0.0
1 	2010-06-30 	5.158 	6.084 	4.660 	4.766 	85935500 	0 	0.0
2 	2010-07-01 	5.000 	5.184 	4.054 	4.392 	41094000 	0 	0.0
3 	2010-07-02 	4.600 	4.620 	3.742 	3.840 	25699000 	0 	0.0
4 	2010-07-06 	4.000 	4.000 	3.166 	3.222 	34334500 	0 	0.0
Question 2: Use Webscraping to Extract Tesla Revenue Data

Use the requests library to download the webpage https://www.macrotrends.net/stocks/charts/TSLA/tesla/revenue. Save the text of the response as a variable named html_data.

url = "https://www.macrotrends.net/stocks/charts/TSLA/tesla/revenue"
html_data = requests.get(url).text

Parse the html data using beautiful_soup.

soup = BeautifulSoup(html_data, "html.parser")
soup.find_all('title')

[<title>Tesla Revenue 2009-2020 | TSLA | MacroTrends</title>]

Using beautiful soup extract the table with Tesla Quarterly Revenue and store it into a dataframe named tesla_revenue. The dataframe should have columns Date and Revenue. Make sure the comma and dollar sign is removed from the Revenue column.

tesla_revenue = pd.DataFrame(columns = ['Date', 'Revenue'])

for row in soup.find_all("tbody")[1].find_all("tr"):
    col = row.find_all("td")
    date = col[0].text
    revenue = col[1].text.replace("$", "").replace(",", "")
    
    tesla_revenue = tesla_revenue.append({"Date": date, "Revenue": revenue}, ignore_index = True)

Click here if you need help removing the dollar sign and comma
``` If you parsed the HTML table by row and column you can use the replace function on the string revenue = col[1].text.replace("$", "").replace(",", "") If you use the read_html function you can use the replace function on the string representation of the column tesla_revenue["Revenue"] = tesla_revenue["Revenue"].str.replace("$", "").str.replace(",", "") ```

Remove the rows in the dataframe that are empty strings or are NaN in the Revenue column. Print the entire tesla_revenue DataFrame to see if you have any.

tesla_revenue.dropna(inplace=True)
tesla_revenue = tesla_revenue[tesla_revenue['Revenue'] != ""]

Click here if you need help removing the Nan or empty strings
``` If you have NaN in the Revenue column tesla_revenue.dropna(inplace=True) If you have emtpty string in the Revenue column tesla_revenue = tesla_revenue[tesla_revenue['Revenue'] != ""] ```

Display the last 5 row of the tesla_revenue dataframe using the tail function. Take a screenshot of the results.

tesla_revenue.tail()

	Date 	Revenue
41 	2010-09-30 	31
42 	2010-06-30 	28
43 	2010-03-31 	21
45 	2009-09-30 	46
46 	2009-06-30 	27
Question 3: Use yfinance to Extract Stock Data

Using the Ticker function enter the ticker symbol of the stock we want to extract data on to create a ticker object. The stock is GameStop and its ticker symbol is GME.

GameStop = yf.Ticker("GME")

Using the ticker object and the function history extract stock information and save it in a dataframe named gme_data. Set the period parameter to max so we get information for the maximum amount of time.

gme_data = GameStop.history(period = 'max')

Reset the index using the reset_index(inplace=True) function on the gme_data DataFrame and display the first five rows of the gme_data dataframe using the head function. Take a screenshot of the results and code from the beginning of Question 3 to the results below.

gme_data.reset_index(inplace = True)
gme_data.head()

	Date 	Open 	High 	Low 	Close 	Volume 	Dividends 	Stock Splits
0 	2002-02-13 	6.480513 	6.773399 	6.413183 	6.766666 	19054000 	0.0 	0.0
1 	2002-02-14 	6.850831 	6.864296 	6.682506 	6.733003 	2755400 	0.0 	0.0
2 	2002-02-15 	6.733001 	6.749833 	6.632006 	6.699336 	2097400 	0.0 	0.0
3 	2002-02-19 	6.665671 	6.665671 	6.312189 	6.430017 	1852600 	0.0 	0.0
4 	2002-02-20 	6.463681 	6.648838 	6.413183 	6.648838 	1723200 	0.0 	0.0
Question 4: Use Webscraping to Extract GME Revenue Data

Use the requests library to download the webpage https://www.macrotrends.net/stocks/charts/GME/gamestop/revenue. Save the text of the response as a variable named html_data.

url = "https://www.macrotrends.net/stocks/charts/GME/gamestop/revenue"
html_data = requests.get(url).text

Parse the html data using beautiful_soup.

soup = BeautifulSoup(html_data, "html.parser")
soup.find_all('title')

[<title>GameStop Revenue 2006-2020 | GME | MacroTrends</title>]

Using beautiful soup extract the table with GameStop Quarterly Revenue and store it into a dataframe named gme_revenue. The dataframe should have columns Date and Revenue. Make sure the comma and dollar sign is removed from the Revenue column using a method similar to what you did in Question 2.

gme_revenue = pd.DataFrame(columns = ['Date', 'Revenue'])

for row in soup.find_all("tbody")[1].find_all("tr"):
    col = row.find_all("td")
    date = col[0].text
    revenue = col[1].text.replace("$", "").replace(",", "")
    
    gme_revenue = gme_revenue.append({"Date": date, "Revenue": revenue}, ignore_index = True)

Display the last five rows of the gme_revenue dataframe using the tail function. Take a screenshot of the results.

tesla_revenue.dropna(inplace=True)
tesla_revenue = tesla_revenue[tesla_revenue['Revenue'] != ""]
gme_revenue.tail()

	Date 	Revenue
59 	2006-01-31 	1667
60 	2005-10-31 	534
61 	2005-07-31 	416
62 	2005-04-30 	475
63 	2005-01-31 	709
Question 5: Plot Tesla Stock Graph

Use the make_graph function to graph the Tesla Stock Data, also provide a title for the graph. The structure to call the make_graph function is make_graph(tesla_data, tesla_revenue, 'Tesla')

make_graph(tesla_data, tesla_revenue, 'Tesla')

Question 6: Plot GameStop Stock Graph

Use the make_graph function to graph the GameStop Stock Data, also provide a title for the graph. The structure to call the make_graph function is make_graph(gme_data, gme_revenue, 'GameStop').

make_graph(gme_data, gme_revenue, 'GameStop')



